apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "postgres-test.fullname" . }}
  labels:
    {{- include "postgres-test.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "postgres-test.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "postgres-test.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
            - |
              apt-get install -y libpq-dev gcc
              pip install psycopg2-binary
              python /app/test-script.py
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgres.existingSecret.name }}{{ .Values.postgres.existingSecret.name }}{{ else }}{{ include "postgres-test.fullname" . }}{{ end }}
                  key: {{ if .Values.postgres.existingSecret.name }}{{ .Values.postgres.existingSecret.keys.host }}{{ else }}DB_HOST{{ end }}
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgres.existingSecret.name }}{{ .Values.postgres.existingSecret.name }}{{ else }}{{ include "postgres-test.fullname" . }}{{ end }}
                  key: {{ if .Values.postgres.existingSecret.name }}{{ .Values.postgres.existingSecret.keys.port }}{{ else }}DB_PORT{{ end }}
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgres.existingSecret.name }}{{ .Values.postgres.existingSecret.name }}{{ else }}{{ include "postgres-test.fullname" . }}{{ end }}
                  key: {{ if .Values.postgres.existingSecret.name }}{{ .Values.postgres.existingSecret.keys.database }}{{ else }}DB_NAME{{ end }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgres.existingSecret.name }}{{ .Values.postgres.existingSecret.name }}{{ else }}{{ include "postgres-test.fullname" . }}{{ end }}
                  key: {{ if .Values.postgres.existingSecret.name }}{{ .Values.postgres.existingSecret.keys.username }}{{ else }}DB_USER{{ end }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgres.existingSecret.name }}{{ .Values.postgres.existingSecret.name }}{{ else }}{{ include "postgres-test.fullname" . }}{{ end }}
                  key: {{ if .Values.postgres.existingSecret.name }}{{ .Values.postgres.existingSecret.keys.password }}{{ else }}DB_PASSWORD{{ end }}
            - name: TEST_FREQUENCY_SECONDS
              value: "{{ .Values.postgres.testFrequencySeconds }}"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: test-script
              mountPath: /app
      volumes:
        - name: test-script
          configMap:
            name: {{ include "postgres-test.fullname" . }}-script
            defaultMode: 0755